## 1. Two Sum
```python
def two_sum(nums, target):
    num_map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_map:
            return [num_map[complement], i]
        num_map[num] = i
    return []

# Example
print(two_sum([2, 7, 11, 15], 9))  # Output: [0, 1]
```

## 2. Reverse a String
```python
def reverse_string(s):
    # Method 1: Slicing
    return s[::-1]
    
    # Method 2: Two pointers
    # chars = list(s)
    # left, right = 0, len(chars) - 1
    # while left < right:
    #     chars[left], chars[right] = chars[right], chars[left]
    #     left += 1
    #     right -= 1
    # return ''.join(chars)

# Example
print(reverse_string("hello"))  # Output: "olleh"
```

## 3. Fibonacci Sequence
```python
def fibonacci(n):
    # Method 1: Iterative (efficient)
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b

    # Method 2: Recursive with memoization
    # memo = {}
    # def fib(n):
    #     if n in memo:
    #         return memo[n]
    #     if n <= 1:
    #         return n
    #     memo[n] = fib(n-1) + fib(n-2)
    #     return memo[n]
    # return fib(n)

# Example
print(fibonacci(10))  # Output: 55
```

## 4. Find Missing Number
```python
def missing_number(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    return total_sum - actual_sum

# Example
print(missing_number([3, 0, 1]))  # Output: 2
```

## 5. Valid Parentheses
```python
def is_valid_parentheses(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping:
            if not stack or stack.pop() != mapping[char]:
                return False
    return not stack

# Example
print(is_valid_parentheses("()[]{}"))  # Output: True
print(is_valid_parentheses("([)]"))    # Output: False
```

## 6. Palindrome Check
```python
def is_palindrome(s):
    # Clean the string
    cleaned = ''.join(char.lower() for char in s if char.isalnum())
    
    # Check palindrome
    left, right = 0, len(cleaned) - 1
    while left < right:
        if cleaned[left] != cleaned[right]:
            return False
        left += 1
        right -= 1
    return True

# Example
print(is_palindrome("A man, a plan, a canal: Panama"))  # Output: True
```

## 7. Maximum Subarray (Kadane's Algorithm)
```python
def max_subarray(nums):
    max_sum = current_sum = nums[0]
    
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    
    return max_sum

# Example
print(max_subarray([-2,1,-3,4,-1,2,1,-5,4]))  # Output: 6
```

## 8. FizzBuzz
```python
def fizzbuzz(n):
    result = []
    for i in range(1, n + 1):
        if i % 15 == 0:
            result.append("FizzBuzz")
        elif i % 3 == 0:
            result.append("Fizz")
        elif i % 5 == 0:
            result.append("Buzz")
        else:
            result.append(str(i))
    return result

# Example
print(fizzbuzz(5))  # Output: ['1', '2', 'Fizz', '4', 'Buzz']
```

## 9. Anagram Check
```python
def is_anagram(s1, s2):
    # Method 1: Using sorted
    return sorted(s1) == sorted(s2)
    
    # Method 2: Using frequency counter
    # if len(s1) != len(s2):
    #     return False
    # freq = {}
    # for char in s1:
    #     freq[char] = freq.get(char, 0) + 1
    # for char in s2:
    #     if char not in freq or freq[char] == 0:
    #         return False
    #     freq[char] -= 1
    # return True

# Example
print(is_anagram("listen", "silent"))  # Output: True
```

## 10. Binary Search
```python
def binary_search(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1

# Example
print(binary_search([1, 3, 5, 7, 9], 5))  # Output: 2
```

## Bonus: Most Common Element
```python
from collections import Counter

def most_common_element(nums):
    count = Counter(nums)
    return count.most_common(1)[0][0]

# Example
print(most_common_element([1, 2, 2, 3, 3, 3, 4]))  # Output: 3
```

## Key Concepts These Problems Test:

1. **Algorithmic Thinking**: Problem-solving approaches
2. **Time/Space Complexity**: Efficiency analysis
3. **Data Structures**: Arrays, strings, stacks, hash maps
4. **Edge Cases**: Handling boundary conditions
5. **Code Readability**: Clean, maintainable code
6. **Pythonic Code**: Using Python features effectively
